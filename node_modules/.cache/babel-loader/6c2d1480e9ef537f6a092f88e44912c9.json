{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u7AF9\\u5185 \\u5553\\u4EBA\\\\Documents\\\\git\\\\myFirstReactApp\\\\src\\\\App2.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint react-hooks/exhaustive-deps: off*/\nimport React, { useEffect, useState } from \"react\";\nimport GoogleMapReact from 'google-map-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App2 = () => {\n  _s();\n\n  const [num, setNum] = useState(0); //numは変数、setNumは更新関数\n\n  const [ahoahoShowFlag, setAhoahoShowFrag] = useState(false);\n  const [map, setMap] = useState(null);\n  const [maps, setMaps] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [center, setCenter] = useState({\n    lat: \"\",\n    lng: \"\"\n  });\n  const [currentPosition, setCurrentPosition] = useState();\n  const TestKey = \"\";\n\n  const onClickButton = () => {\n    setNum(num + 1);\n  };\n\n  const onClickSwithShowFlag = () => {\n    setAhoahoShowFrag(!ahoahoShowFlag);\n  };\n\n  useEffect(() => {\n    if (num > 0) {\n      if (num % 3 === 0) {\n        ahoahoShowFlag || setAhoahoShowFrag(true);\n      } else {\n        ahoahoShowFlag && setAhoahoShowFrag(false);\n      }\n    }\n  }, [num]); //第二引数に与えた関数に関心を持つ関数となる。\n  // 初期表示地点\n\n  const success = data => {\n    const currentPosition = {\n      lat: data.coords.latitude,\n      lng: data.coords.longitude\n    };\n    setCurrentPosition(currentPosition);\n    setCenter(currentPosition);\n  }; //geolocation使えない場合の値を返す\n\n\n  const error = data => {\n    const currentPosition = {\n      lat: 34.673542,\n      lng: 135.433338\n    };\n    setCurrentPosition(currentPosition);\n    setCenter(currentPosition);\n    alert(\"現在地を読み取れませんでした\");\n  }; //初期読み込み時のみgeolocationを動かす\n\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error);\n  }, []); // クリックした点の読み取り\n  // map, maps で受け取ると変数が被るので object で受け取っています\n\n  const handleApiLoaded = object => {\n    setMap(object.map);\n    setMaps(object.maps);\n  };\n\n  const setLatLng = ({\n    lat,\n    lng\n  }) => {\n    if (marker) {\n      marker.setMap(null);\n    }\n\n    const latLng = {\n      lat,\n      lng\n    };\n    setMarker(new maps.Marker({\n      map,\n      position: latLng\n    })); // map.panTo(latLng);クリック地点をセンターにする\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"black\"\n      },\n      children: \"Google Map API Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-area\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMapReact //  {alert}\n      // bootstrapURLKeys={{ key: process.env.NEXT_PUBLIC_GOOGLE_MAP_KEY }}\n      , {\n        bootstrapURLKeys: {\n          key: TestKey\n        },\n        defaultCenter: center,\n        defaultZoom: 16,\n        onClick: setLatLng,\n        onGoogleApiLoaded: handleApiLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App2, \"TOB0QnrhHoGG+L1Y2Squp7kPS6Q=\");\n\n_c = App2;\n\nvar _c;\n\n$RefreshReg$(_c, \"App2\");","map":{"version":3,"sources":["C:/Users/竹内 啓人/Documents/git/myFirstReactApp/src/App2.jsx"],"names":["React","useEffect","useState","GoogleMapReact","App2","num","setNum","ahoahoShowFlag","setAhoahoShowFrag","map","setMap","maps","setMaps","marker","setMarker","center","setCenter","lat","lng","currentPosition","setCurrentPosition","TestKey","onClickButton","onClickSwithShowFlag","success","data","coords","latitude","longitude","error","alert","navigator","geolocation","getCurrentPosition","handleApiLoaded","object","setLatLng","latLng","Marker","position","color","key"],"mappings":"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","sourcesContent":["/* eslint react-hooks/exhaustive-deps: off*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nexport const App2 = () => {\r\n\r\n  const [num, setNum] = useState(0); //numは変数、setNumは更新関数\r\n  const [ahoahoShowFlag, setAhoahoShowFrag] = useState(false);\r\n  const [map, setMap] = useState(null);\r\n  const [maps, setMaps] = useState(null);\r\n  const [marker, setMarker] = useState(null);\r\n  const [center, setCenter] = useState({ lat: \"\", lng: \"\" });\r\n  const [currentPosition, setCurrentPosition] = useState();\r\n  const TestKey = \"\";\r\n\r\n  const onClickButton = () => {\r\n    setNum(num + 1);\r\n  };\r\n\r\n  const onClickSwithShowFlag = () => {\r\n    setAhoahoShowFrag(!ahoahoShowFlag);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (num > 0) {\r\n      if (num % 3 === 0) {\r\n        ahoahoShowFlag || setAhoahoShowFrag(true);\r\n      } else {\r\n        ahoahoShowFlag && setAhoahoShowFrag(false);\r\n      }\r\n    }\r\n  }, [num]);//第二引数に与えた関数に関心を持つ関数となる。\r\n\r\n\r\n  // 初期表示地点\r\n  const success = data => {\r\n    const currentPosition = {\r\n      lat: data.coords.latitude,\r\n      lng: data.coords.longitude\r\n    };\r\n    setCurrentPosition(currentPosition);\r\n    setCenter(currentPosition);\r\n  };\r\n  //geolocation使えない場合の値を返す\r\n  const error = data => {\r\n    const currentPosition = {\r\n      lat: 34.673542,\r\n      lng: 135.433338\r\n    };\r\n    setCurrentPosition(currentPosition);\r\n    setCenter(currentPosition);\r\n    alert(\"現在地を読み取れませんでした\")\r\n  };\r\n\r\n  //初期読み込み時のみgeolocationを動かす\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n  }, []);\r\n\r\n  // クリックした点の読み取り\r\n  // map, maps で受け取ると変数が被るので object で受け取っています\r\n  const handleApiLoaded = (object) => {\r\n    setMap(object.map);\r\n    setMaps(object.maps);\r\n  };\r\n\r\n  const setLatLng = ({ lat, lng }) => {\r\n    if (marker) {\r\n      marker.setMap(null);\r\n    }\r\n    const latLng = {\r\n      lat,\r\n      lng,\r\n    };\r\n    setMarker(new maps.Marker({ map, position: latLng, }));\r\n    // map.panTo(latLng);クリック地点をセンターにする\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 style={{ color: \"black\" }}>Google Map API Test</h1>\r\n\r\n      <div className=\"map-area\">\r\n        <GoogleMapReact\r\n        //  {alert}\r\n          // bootstrapURLKeys={{ key: process.env.NEXT_PUBLIC_GOOGLE_MAP_KEY }}\r\n          bootstrapURLKeys={{key:TestKey}}\r\n          defaultCenter={center}\r\n          defaultZoom={16}\r\n          onClick={setLatLng}\r\n          onGoogleApiLoaded={handleApiLoaded}\r\n        />\r\n        \r\n\r\n      </div>\r\n      {/* <ColorfulMessage color=\"black\"> お元気ですよね?</ColorfulMessage>  */}\r\n      {/* <ColorfulMessage color=\"pink\"> 元気です</ColorfulMessage> */}\r\n      {/* <button onClick={onClickButton}>カウントアップ</button>\r\n      <button onClick={onClickSwithShowFlag}>on/off</button>\r\n      <p>{num}</p>\r\n      {ahoahoShowFlag && <p>あほあほ</p>}\r\n      <p>あほあほ</p> */}\r\n\r\n    </>\r\n  )\r\n\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}